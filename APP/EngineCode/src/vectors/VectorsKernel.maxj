
package vectors;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;

class VectorsKernel extends Kernel {

	VectorsKernel(KernelParameters parameters, int vectorSize) {
		super(parameters);

        DFEVar n=constant.var(dfeFloat(8, 24), vectorSize);
        DFEVar ax=constant.var(dfeFloat(8, 24), 0);
        DFEVar ay=constant.var(dfeFloat(8, 24), 0);

		DFEVectorType<DFEVar> vectorType =
			new DFEVectorType<DFEVar>(dfeFloat(8,24), vectorSize);

		// Input
		DFEVector<DFEVar> inVector = io.input("inVector", vectorType);
        DFEVector<DFEVar> inVector2 = io.input("inVector2", vectorType);
        

		for (int i = 0; i < vectorSize; i++){
			ax+=inVector[i];
			ay+=inVector2[i];
		}
		
		ax/=n;
		ay/=n;
		
		DFEVar xt=constant.var(dfeFloat(8, 24), 0);
        DFEVar yt=constant.var(dfeFloat(8, 24), 0);
        DFEVar sxx=constant.var(dfeFloat(8, 24), 0);
        DFEVar syy=constant.var(dfeFloat(8, 24), 0);
        DFEVar sxy=constant.var(dfeFloat(8, 24), 0);
		
		for (int i = 0; i < vectorSize; i++){
			xt = inVector[i]-ax;
			yt = inVector2[i]-ay;
			sxx += xt*xt;
			syy += yt*yt;
			sxy += xt*yt;
		}

        DFEVar r = sxy/(KernelMath.sqrt(sxx*syy)+1.0e-20);

		//Output
		io.output("outScalar", r, dfeFloat (8, 24));
	}

}
